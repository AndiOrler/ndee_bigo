THEORY

//Complexity

Time complexity: Describes the change of execution time of an algorithm depending on the change of the size of the input data

Space complexity: Describes how much additional memory an algorithm needs depending on the size of the input data

Further:
The effort of an algorithm can contain constants or elements of lower complexity classes.
Both are irrelevant for the big O notation, since both are no longer important as n becomes very large.

Depending on how the curve looks, higher complexity classes can have lower effort up to a certain point.

//Complexity classes

>> O(1)
constant time, independent of number of input elements n
e.g. access an element in an array  array[i]

>> O(n)
Linear complexity, if input n is doubled, the effort is double as well
e. g. summing elements of an array

>> O(nÂ²)
The effort increases linear squared compared to the number of input elements. If the number of input elments doubles,
the effort is times four.
e.g. simple sorts like insertion, selection or bubble sort.

>> O(log n)


>> O(n log n)
